name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: kennteohstorehub/lark-mcp-server

jobs:
  # 🧪 Test Job
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Lint Code
      run: npm run lint
      
    - name: 🧪 Run Unit Tests
      run: npm run test
      
    - name: 📊 Test Coverage
      run: npm run test:coverage
      
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        
    - name: 🔒 Security Audit
      run: npm audit --audit-level=moderate
      
    - name: 🏗️ Build Check
      run: npm run build --if-present

  # 🐳 Docker Build Job
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      continue-on-error: true
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      continue-on-error: true
      with:
        context: .
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 🚀 Release Job
  release:
    name: 🚀 Release Management
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏷️ Tag Docker Image for Release
      run: |
        docker pull ${{ env.DOCKER_IMAGE }}:latest
        docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }}
        docker push ${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }}
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📝 Update Release Notes
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const release = context.payload.release;
          
          const newBody = `${release.body}

          ## 🐳 Docker Images
          
          - \`${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }}\`
          - \`${{ env.DOCKER_IMAGE }}:latest\`
          
          ## 🚀 Quick Deploy
          
          \`\`\`bash
          docker run -p 3000:3000 ${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }}
          \`\`\`
          `;
          
          await github.rest.repos.updateRelease({
            owner,
            repo,
            release_id: release.id,
            body: newBody
          });

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # 📊 Performance Test
  performance:
    name: 📊 Performance Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🚀 Start Test Server
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000
        
    - name: ⏱️ Wait for Server
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'
        
    - name: 📈 Run Performance Tests
      run: |
        npm install -g artillery
        artillery quick --count 10 --num 100 http://localhost:3000/health
        
    - name: 📊 Generate Performance Report
      run: |
        echo "Performance test completed for PR #${{ github.event.pull_request.number }}" 