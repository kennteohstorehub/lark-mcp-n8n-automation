#!/usr/bin/env node

// Load environment variables
require('dotenv').config();

const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const { spawn, exec } = require('child_process');

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

class SurpriseAutomation {
    constructor() {
        this.startTime = new Date();
        this.tasks = [];
        this.completedTasks = [];
    }

    async log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const symbols = { info: '🔷', success: '✅', warning: '⚠️', error: '❌', magic: '✨' };
        console.log(`${symbols[type]} [${timestamp}] ${message}`);
    }

    async executeTask(name, taskFunction) {
        this.log(`Starting: ${name}`, 'info');
        this.tasks.push({ name, status: 'running', startTime: Date.now() });
        
        try {
            const result = await taskFunction();
            this.completedTasks.push({ name, result, duration: Date.now() - this.tasks.find(t => t.name === name).startTime });
            this.log(`Completed: ${name}`, 'success');
            return result;
        } catch (error) {
            this.log(`Failed: ${name} - ${error.message}`, 'error');
            throw error;
        }
    }

    async takeScreenshot() {
        return new Promise((resolve, reject) => {
            const filename = `surprise_screenshot_${Date.now()}.png`;
            exec(`python3 macos_automation.py screenshot ${filename}`, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                } else {
                    resolve({ filename, output: stdout });
                }
            });
        });
    }

    async analyzeSystemWithGemini() {
        const systemInfo = {
            timestamp: new Date().toISOString(),
            platform: process.platform,
            nodeVersion: process.version,
            workingDirectory: process.cwd(),
            memoryUsage: process.memoryUsage(),
            uptime: process.uptime(),
            mcpServers: 8,
            capabilities: ['Browser Control', 'macOS Automation', 'Email Integration', 'File Organization', 'AI Analysis']
        };

        const prompt = `
        You are an AI productivity assistant. Analyze this system information and create a personalized productivity report:
        
        System Info: ${JSON.stringify(systemInfo, null, 2)}
        
        Create a brief, encouraging productivity report with:
        1. System health assessment
        2. Productivity tips based on current time
        3. One specific automation suggestion
        4. A motivational message
        
        Keep it under 200 words and make it personal and actionable.
        `;

        const result = await model.generateContent(prompt);
        return result.response.text();
    }

    async createProductivityFiles() {
        const today = new Date().toISOString().split('T')[0];
        const todayTasksFile = `productivity_${today}.md`;
        
        const content = `# 🚀 Productivity Report - ${today}

## 📊 System Status
- **Time**: ${new Date().toLocaleString()}
- **Status**: All systems operational
- **MCP Servers**: 8 active servers
- **Automation**: Ready for commands

## 🎯 Today's Focus Areas
- [ ] Review and prioritize tasks
- [ ] Optimize development workflow
- [ ] Explore new automation possibilities
- [ ] Test MCP integrations

## 🔧 Available Tools
- ✅ Browser automation (Playwright)
- ✅ macOS GUI control
- ✅ Email automation
- ✅ File organization
- ✅ Web scraping
- ✅ AI integration (Gemini Pro)

## 💡 Smart Suggestions
- Use MCP servers for repetitive tasks
- Automate file organization
- Set up email filters
- Create custom workflows

## 🎭 Surprise Automation Capabilities
- AI-powered system analysis
- Automated screenshot capture
- Dynamic productivity reporting
- Interactive dashboard creation
- Multi-modal AI integration
- Background process management

---
*Generated by AI Productivity Assistant*
`;

        fs.writeFileSync(todayTasksFile, content);
        return { filename: todayTasksFile, content };
    }

    async openDashboard() {
        return new Promise((resolve, reject) => {
            exec('open ai_dashboard.html', (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                } else {
                    resolve('Dashboard opened successfully');
                }
            });
        });
    }

    async createWorkspaceReport() {
        const files = fs.readdirSync('.');
        const report = {
            totalFiles: files.length,
            fileTypes: {},
            recentFiles: [],
            projectSize: 0
        };

        files.forEach(file => {
            const ext = path.extname(file);
            report.fileTypes[ext] = (report.fileTypes[ext] || 0) + 1;
            
            try {
                const stats = fs.statSync(file);
                if (stats.isFile()) {
                    report.projectSize += stats.size;
                    report.recentFiles.push({
                        name: file,
                        size: stats.size,
                        modified: stats.mtime
                    });
                }
            } catch (err) {
                // Skip files we can't read
            }
        });

        report.recentFiles.sort((a, b) => b.modified - a.modified);
        report.recentFiles = report.recentFiles.slice(0, 5);

        const reportFile = `workspace_report_${Date.now()}.json`;
        fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
        return { report, filename: reportFile };
    }

    async createTimeBasedGreeting() {
        const hour = new Date().getHours();
        let greeting, activity;

        if (hour < 12) {
            greeting = "Good morning! 🌅";
            activity = "Perfect time to start your day with some automation magic!";
        } else if (hour < 18) {
            greeting = "Good afternoon! ☀️";
            activity = "Let's boost your productivity with some smart automation!";
        } else {
            greeting = "Good evening! 🌙";
            activity = "Time to wrap up the day and prepare for tomorrow!";
        }

        return { greeting, activity };
    }

    async generateSurpriseReport() {
        const report = {
            title: "🎭 SURPRISE AUTOMATION REPORT",
            timestamp: new Date().toISOString(),
            totalTasks: this.completedTasks.length,
            executionTime: Date.now() - this.startTime.getTime(),
            tasks: this.completedTasks,
            capabilities: [
                "✅ AI-powered system analysis",
                "✅ Automated screenshot capture",
                "✅ Dynamic productivity reporting",
                "✅ Interactive dashboard creation",
                "✅ Multi-modal AI integration",
                "✅ Background process management",
                "✅ Personalized workflow optimization",
                "✅ Workspace analysis and reporting"
            ]
        };

        const reportFile = `surprise_report_${Date.now()}.json`;
        fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
        return { report, filename: reportFile };
    }

    async executeFullSurprise() {
        this.log("🎪 INITIATING SURPRISE AUTOMATION SEQUENCE", 'magic');
        this.log("🚀 Preparing to demonstrate full MCP ecosystem...", 'info');

        try {
            // Step 1: Open the dashboard
            await this.executeTask("Opening AI Dashboard", () => this.openDashboard());

            // Step 2: Create time-based greeting
            const greetingData = await this.executeTask("Creating Personalized Greeting", () => this.createTimeBasedGreeting());
            this.log(`${greetingData.greeting} ${greetingData.activity}`, 'magic');

            // Step 3: Take screenshot
            const screenshotResult = await this.executeTask("Capturing System Screenshot", () => this.takeScreenshot());
            this.log(`📸 Screenshot saved: ${JSON.parse(screenshotResult.output).filename}`, 'success');

            // Step 4: Analyze system with Gemini
            const aiAnalysis = await this.executeTask("AI System Analysis", () => this.analyzeSystemWithGemini());
            this.log("🧠 AI Analysis Complete:", 'success');
            console.log("📋 " + aiAnalysis);

            // Step 5: Create productivity files
            const productivityFiles = await this.executeTask("Creating Productivity Files", () => this.createProductivityFiles());
            this.log(`📄 Created: ${productivityFiles.filename}`, 'success');

            // Step 6: Create workspace report
            const workspaceReport = await this.executeTask("Analyzing Workspace", () => this.createWorkspaceReport());
            this.log(`📊 Analyzed ${workspaceReport.report.totalFiles} files`, 'success');

            // Step 7: Generate final report
            const finalReport = await this.executeTask("Generating Surprise Report", () => this.generateSurpriseReport());

            this.log("🎉 SURPRISE AUTOMATION COMPLETE!", 'magic');
            this.log(`📊 Executed ${finalReport.report.totalTasks} tasks in ${finalReport.report.executionTime}ms`, 'success');
            this.log(`📄 Full report saved to: ${finalReport.filename}`, 'info');

            // Final surprise message
            setTimeout(() => {
                this.log("🎭 SURPRISE REVEAL:", 'magic');
                this.log("📱 Your browser opened an AI dashboard!", 'info');
                this.log("📸 Screenshots were taken automatically!", 'info');
                this.log("🤖 Gemini AI analyzed your system!", 'info');
                this.log("📋 Productivity report was generated!", 'info');
                this.log("📊 Workspace analysis completed!", 'info');
                this.log("🎯 Multiple automation files created!", 'info');
                this.log("✨ This is the power of MCP automation!", 'magic');
                this.log("🚀 Ready for your next command!", 'success');
            }, 1000);

        } catch (error) {
            this.log(`💥 Surprise automation failed: ${error.message}`, 'error');
            throw error;
        }
    }
}

// Execute the surprise if this script is run directly
if (require.main === module) {
    const automation = new SurpriseAutomation();
    automation.executeFullSurprise()
        .then(() => {
            console.log("\n🎊 SURPRISE AUTOMATION COMPLETED SUCCESSFULLY! 🎊");
            console.log("🔍 Check your current directory for new files!");
            console.log("📱 Check your browser for the AI dashboard!");
            console.log("🤖 This demonstrates the full power of MCP automation!");
            process.exit(0);
        })
        .catch((error) => {
            console.error("❌ Surprise automation failed:", error);
            process.exit(1);
        });
}

module.exports = SurpriseAutomation; 